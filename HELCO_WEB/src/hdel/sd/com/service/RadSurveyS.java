package hdel.sd.com.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import net.sf.jxls.transformer.XLSTransformer;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.math.BigDecimal;
import java.sql.SQLException;

import hdel.lib.dao.SrmSqlSession;
import hdel.lib.exception.BizException;
import hdel.sd.com.dao.RadSurveyD;
import hdel.sd.com.domain.FloorNmVO;
import hdel.sd.com.domain.SuvFloorVO;
import hdel.sd.com.domain.SuvPrhVO;

import org.apache.log4j.Logger;
import org.mybatis.spring.SqlSessionTemplate;

/**
 * ¸®¸ðµ¨¸µ¿ë Duty Ã³¸® ¼­ºñ½º Å¬·¡½º
 * 
 * @author  ¹Ú¼ö±Ù
 * @since 2021.01.26
 * @version 1.0
 * @see 
 * <pre>
 *  == °³Á¤ÀÌ·Â(Modification Information) ==
 *   
 *          ¼öÁ¤ÀÏ          ¼öÁ¤ÀÚ           ¼öÁ¤³»¿ë
 *  ----------------    ------------    ---------------------------
 *   2021.01.26         ¹Ú¼ö±Ù          ÃÖÃÊ »ý¼º
 * 
 * </pre>
 */

@Service
public class RadSurveyS {

	// ·Î±×¼±¾ð
	Logger logger = Logger.getLogger(this.getClass());
	
	@Autowired
	private SrmSqlSession srmQqlSession;	
	
	private SqlSessionTemplate sqlSessionTemplate;
	
	private SqlSessionFactory sqlSessionFactory;
	
    private RadSurveyD dao;

	@Autowired
	private RadFloorS radFloorS;	
    
	@Autowired
	private RadEnterS radEnterS;
	
	
	private String[] floorIds = {"ELR_H_ELVDONG", "ELR_C_EHP", "ELR_C_EFH40" ,"ELR_C_EFH39" ,"ELR_C_EFH38" ,"ELR_C_EFH37" ,"ELR_C_EFH36" ,"ELR_C_EFH35" ,"ELR_C_EFH34" ,"ELR_C_EFH33" ,"ELR_C_EFH32" ,"ELR_C_EFH31" ,"ELR_C_EFH30" ,"ELR_C_EFH29" ,"ELR_C_EFH28" ,"ELR_C_EFH27" ,"ELR_C_EFH26" ,"ELR_C_EFH25" ,"ELR_C_EFH24" ,"ELR_C_EFH23" ,"ELR_C_EFH22" ,"ELR_C_EFH21" ,"ELR_C_EFH20" ,"ELR_C_EFH19" ,"ELR_C_EFH18" ,"ELR_C_EFH17" ,"ELR_C_EFH16" ,"ELR_C_EFH15" ,"ELR_C_EFH14" ,"ELR_C_EFH13" ,"ELR_C_EFH12" ,"ELR_C_EFH11" ,"ELR_C_EFH10" ,"ELR_C_EFH09" ,"ELR_C_EFH08" ,"ELR_C_EFH07" ,"ELR_C_EFH06" ,"ELR_C_EFH05" ,"ELR_C_EFH04" ,"ELR_C_EFH03" ,"ELR_C_EFH02" ,"ELR_C_EFH01" ,"ELR_C_EFHB1" ,"ELR_C_EFHB2" ,"ELR_C_EFHB3" ,"ELR_C_EFHB4" ,"ELR_C_EFHB5"}; //,"ELR_C_EFHB6", "ELR_C_EFHB7", "ELR_C_EFHB8", "ELR_C_EFHB9", "ELR_C_EFHB10"
	private String[] floorNm  = {"µ¿/È£±â", "PIT" ,"40Ãþ"  ,"39Ãþ"  ,"38Ãþ"  ,"37Ãþ"  ,"36Ãþ"  ,"35Ãþ"  ,"34Ãþ"  ,"33Ãþ"  ,"32Ãþ"  ,"31Ãþ"  ,"30Ãþ"  ,"29Ãþ"  ,"28Ãþ"  ,"27Ãþ"  ,"26Ãþ"  ,"25Ãþ"  ,"24Ãþ"  ,"23Ãþ"  ,"22Ãþ"  ,"21Ãþ"  ,"20Ãþ"  ,"19Ãþ"  ,"18Ãþ"  ,"17Ãþ"  ,"16Ãþ"  ,"15Ãþ"  ,"14Ãþ"  ,"13Ãþ"  ,"12Ãþ"  ,"11Ãþ"  ,"10Ãþ"  ,"09Ãþ"  ,"08Ãþ"  ,"07Ãþ"  ,"06Ãþ"  ,"05Ãþ"  ,"04Ãþ"  ,"03Ãþ"  ,"02Ãþ"  ,"01Ãþ"  ,"B1Ãþ"  ,"B2Ãþ"  ,"B3Ãþ"  ,"B4Ãþ"  ,"B5Ãþ"}; // ,"B6Ãþ"       , "B7Ãþ"       ,"B8Ãþ"        ,"B9Ãþ"        ,"B10Ãþ"
	private int[] floorNum    = {1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10 ,11 ,12 ,13 ,14 ,15 ,16 ,17 ,18 ,19 ,20 ,21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,42 ,43 ,44 ,45 ,46 ,47}; // ,48           , 49           ,50            ,51            ,52

	public void setSqlSessionBySysid(String gSysid) {
		this.sqlSessionTemplate = (SqlSessionTemplate)srmQqlSession.getSqlSessionBySysid(gSysid);
		sqlSessionFactory = this.sqlSessionTemplate.getSqlSessionFactory();
	}

	/**
	 * 
	 * °ßÀû¼­ ¸®¸ðµ¨¸µ ½ÇÃøµî·Ï »óÅÂ Á¶È¸
	 * @throws SQLException 
	 */
	public Map<String, Object> selectEstSuvYsno(Map<String, Object> inMap) throws Exception {
		Map<String, Object> suvstMap;
		SqlSession session =  sqlSessionFactory.openSession(false);
		session.getConnection().setAutoCommit(false);
		dao = session.getMapper(RadSurveyD.class);
		try {
			suvstMap = dao.selectEstSuvYsno(inMap);
		} catch (Exception e) {
			throw e;
		} finally {
			session.close();
		}
		return suvstMap;
	}

	/**
	 * 
	 * ¼öÁÖ ¸®¸ðµ¨¸µ ½ÇÃøµî·Ï »óÅÂ Á¶È¸
	 * @throws SQLException 
	 */
	public Map<String, Object> selectOrderSuvYsno(Map<String, Object> inMap) throws Exception {
		Map<String, Object> suvstMap;
		SqlSession session =  sqlSessionFactory.openSession(false);
		session.getConnection().setAutoCommit(false);
		dao = session.getMapper(RadSurveyD.class);
		try {
			suvstMap = dao.selectOrderSuvYsno(inMap);
		} catch (Exception e) {
			throw e;
		} finally {
			session.close();
		}
		return suvstMap;
	}
	
	/**
	 * 
	 * °ßÀû¼­ ¸®¸ðµ¨¸µ ½ÇÃø»ç¾ç Á¶È¸
	 * @throws SQLException 
	 */
	public List<SuvPrhVO> selectSuvPrhList(Map<String, Object> inMap) throws Exception {
		List<SuvPrhVO> suvPrhList = null;
		SqlSession session =  sqlSessionFactory.openSession(false);
		session.getConnection().setAutoCommit(false);
		dao = session.getMapper(RadSurveyD.class);
		try {
			suvPrhList = dao.selectSuvPrhList(inMap);
		} catch (Exception e) {
			throw e;
		} finally {
			session.close();
		}
		
		return suvPrhList;
	}

	/**
	 * 
	 * sap ¸®¸ðµ¨¸µ ½ÇÃø»ç¾ç Á¶È¸
	 * @throws SQLException 
	 */
	public List<SuvPrhVO> selectSapSuvPrhList(Map<String, Object> inMap) throws Exception {
		List<SuvPrhVO> suvPrhList = null;
		SqlSession session =  sqlSessionFactory.openSession(false);
		session.getConnection().setAutoCommit(false);
		dao = session.getMapper(RadSurveyD.class);
		try {
			suvPrhList = dao.selectSapSuvPrhList(inMap);
		} catch (Exception e) {
			throw e;
		} finally {
			session.close();
		}
		
		return suvPrhList;
	}

	/**
	 * 
	 * ¼öÁÖ ¸®¸ðµ¨¸µ ½ÇÃø»ç¾ç Á¶È¸
	 * @throws SQLException 
	 */
	public List<SuvPrhVO> selectOrderSuvPrhList(Map<String, Object> inMap) throws Exception {
		List<SuvPrhVO> suvPrhList = null;
		SqlSession session =  sqlSessionFactory.openSession(false);
		session.getConnection().setAutoCommit(false);
		dao = session.getMapper(RadSurveyD.class);
		try {
			suvPrhList = dao.selectOrderSuvPrhList(inMap);
		} catch (Exception e) {
			throw e;
		} finally {
			session.close();
		}
		
		return suvPrhList;
	}

	/**
	 * 
	 * ½ÇÃø Ç¥±â½Ã ÀÔ·Â µ¥ÀÌÅÍ Á¶È¸
	 * @throws SQLException 
	 */
	public List<SuvFloorVO> selectSuvFloorList(Map<String, Object> inMap) throws Exception {
		List<SuvFloorVO> suvFloorList = null;
		SqlSession session =  sqlSessionFactory.openSession(false);
		session.getConnection().setAutoCommit(false);
		dao = session.getMapper(RadSurveyD.class);
		try {
			suvFloorList = dao.selectSuvFloorList(inMap);
		} catch (Exception e) {
			throw e;
		} finally {
			session.close();
		}
		return suvFloorList;
	}

	/**
	 * 
	 * ½ÇÃø JAMB ÀÔ·Â µ¥ÀÌÅÍ Á¶È¸
	 * @throws SQLException 
	 */
	public List<Map> selectElrEPnlhList(Map<String, Object> inMap) throws Exception {
		List<Map> suvJambList = null;
		SqlSession session =  sqlSessionFactory.openSession(false);
		session.getConnection().setAutoCommit(false);
		dao = session.getMapper(RadSurveyD.class);
		try {
			suvJambList  = dao.selectElrEPnlhList(inMap);
		} catch (Exception e) {
			throw e;
		} finally {
			session.close();
		}
		return suvJambList;
	}
	
	/**
	 * 
	 * ¿µ¾÷»ç¾ç°ú ½ÇÃø»ç¾çÀ¸·Î Ãþ°í Àü°³¸¦ ¼öÇàÇÑ´Ù.
	 * @param Map<String, String> prhMap, List<Map<String, String>>
	 * @param model
	 * @return
	 */
	public List<String> getFloorSpreadOut(String sUVSN, Map<String, String> prhMap, Map<String, FloorNmVO> floorPrhMap, List<SuvFloorVO> suvFloorList
			                             , List<Map> suvJambList, Map<Integer, String> floorSuvMap) {
		// ¿µ¾÷»ç¾ç Ãþº°Àü°³ ¼­ºñ½º Å¬·¡½º ºÐ¸®
		List<String> errMsgList = radFloorS.getFloorSpreadOut(sUVSN, prhMap, floorPrhMap, suvFloorList, suvJambList, floorSuvMap);
        return errMsgList;
	}

	/**
	 * 
	 * ¿µ¾÷»ç¾ç ¹× ½ÇÃø Ãþº°Àü°³ µ¥ÀÌÅÍ ÀúÀå
	 * @throws SQLException 
	 */
	public void saveFloorOut(Map<String, Object> inMap, List<FloorNmVO> floorPrhList, HashMap<String, String> suvPrhMap, Map<String, Object> outMap) throws Exception {
		
		// floorPrhList: È­¸é¿¡¼­ ¹ÞÀº Ãþ°íÀü°³°á°ú °ª
		// suvPrhMap: »ç¾ç°ª
		
		SqlSession session =  sqlSessionFactory.openSession(false);
		session.getConnection().setAutoCommit(false);
		dao = session.getMapper(RadSurveyD.class);
		try {
			// 
			dao.deleteZPST1138(inMap);
			dao.deleteZPST1139(inMap);
			dao.updateHZPST1139(inMap);
			session.commit();
			for(int i=0; i < floorPrhList.size(); i++) {
				FloorNmVO floorNmVO = floorPrhList.get(i);
				// FLOORDB °ª »ý¼º
				floorNmVO.setFLOORDB(floorNmVO.getFLOOR().replace("B", "-"));
				dao.insertZPST1138(floorNmVO);
				dao.insertZPST1139(floorNmVO);
			}			
			session.commit();
			
			int tmpMaxFloorNum = -99;
			String maxFloor = ""; // ¸Æ½º Ãþ ÃßÃâ
            // ÃþID ±âÁØÀ¸·Î Ãþ°íµ¥ÀÌÅÍ »ý¼º
			Map<String, FloorNmVO> floorMap = new HashMap<String, FloorNmVO>();
			for(int i=0; i < floorPrhList.size(); i++) {
				FloorNmVO floorVo = new FloorNmVO();
				FloorNmVO floorNmVO = floorPrhList.get(i);
				String floorID = "";
				String floorNmID = "";
				String suvprd = floorNmVO.getSUVPRD();
				if(suvprd == null) suvprd = "";
				if(!"".equals(suvprd)) {
					if(floorNmVO.getFLOOR().indexOf("B") > -1 ) {
						// ÁöÇÏÃþ Ãþ°í µ¥ÀÌÅÍ¸¦ »ý¼ºÇÑ´Ù.
						floorID = "ELR_C_EFHB"+floorNmVO.getFLOOR().substring(1);
						floorNmID = "ELC_C_EFNB"+floorNmVO.getFLOOR().substring(1);
						if(suvPrhMap.get(floorID) != null) {
							if(!"".equals(suvPrhMap.get(floorID))) {
								outMap.put("ELC_C_EFNB"+floorNmVO.getFLOOR().substring(1), floorNmVO.getFLOORNM());
							}
						}
					} else {
						// Áö»óÃþ Ãþ°íµ¥ÀÌÅÍ¸¦ »ý¼ºÇÑ´Ù.
						if( (new Integer(floorNmVO.getFLOOR()).intValue()) < 10 ) {
							floorID = "ELR_C_EFH0"+floorNmVO.getFLOOR();
							floorNmID = "ELC_C_EFN0"+floorNmVO.getFLOOR();
						} else {
							floorID = "ELR_C_EFH"+floorNmVO.getFLOOR();
							floorNmID = "ELC_C_EFN"+floorNmVO.getFLOOR();
						}
					}
					
					// Ãþ°í µ¥ÀÌÅÍ »ý¼º
					outMap.put(floorID, suvprd);
					// Ãþ¸í µ¥ÀÌÅÍ »ý¼º
					outMap.put(floorNmID, floorNmVO.getFLOORNM());

					floorVo.setFLOORNM(floorID);
					floorVo.setFLOORPRD(suvprd);
					floorMap.put(floorID, floorVo);
					if(floorNmVO.getFLOORNUM() > tmpMaxFloorNum) {
	                	tmpMaxFloorNum = floorNmVO.getFLOORNUM();
	                	maxFloor = floorID;
	                }
				}
			}

			// Ãþ -> ÃþID ±âÁØÀ¸·Î Ãþ°íID µ¥ÀÌÅÍ¿Í ¸ÅÇÎ
			// Ãþ --> Ãþ°íID ±âÁØÀ¸·Î Ãþ°íID µ¥ÀÌÅÍ¿Í ¸ÅÇÎ
			// ½ÇÃøÄ¡ Áß ÃÖ»óÃþÀ» E008 Overhead ·Î ÀÔ·Â ÇÕ´Ï´Ù.
			// µÑÁß Ãþ°í µ¥ÀÌÅÍ ¸ÅÇÎ µ¥ÀÌÅÍ°¡ °¡Àå Å« µ¥ÀÌ·Î Ãþ°í ½ÇÃø ¿¬»ê½ÇÃø°ªÀ» »ý¼ºÇÑ´Ù.
			// ½ÇÃøÄ¡ °¢°¢ÀÇ Ãþ°í¸¦ ÇÕ»ê ÇÏ¿©. E009 Travel Height °è»ê. ( °è»ê½Ã ÃÖ»óÃþÀº ÇÕ»ê¿¡¼­ Á¦¿Ü. )
			// ½ÇÃøÄ¡ Áß Pit ¸¦E010 Pit ·Î ÀÔ·ÂÇÕ´Ï´Ù.
			String ELR_C_EHO = "";
			String ELC_C_EHTRH = "";
			String ELC_C_EHTH  = "";
			int travelHeight = 0;
			int allHeight = 0;
			String tmpFLOORPRD = "";
			for( String key : floorMap.keySet() ) {
				FloorNmVO floorVo = floorMap.get(key);
				// ¸Æ½º ÃþÀÌ ¾Æ´Ñ°æ¿ì
				if(maxFloor.equals(key)) {
					// ÃÖ»óÃþ ( OH ) ÀÇ °æ¿ì 5´ÜÀ§ ¹ö¸²À¸·Î Àû¿ë ¹Ù¶ø´Ï´Ù.
					// ½ÇÃøÄ¡ 5679 ==> 5675 À¸·Î, ½ÇÃøÄ¡ 5674 ==> 5670 À¸·Î Àû¿ë
					tmpFLOORPRD = getFiveTrunck(new Double(floorVo.getFLOORPRD()).doubleValue());
					floorVo.setFLOORPRD(tmpFLOORPRD);
				} else {
                    // Ãþ°í Áß. ÃÖ»óÃþÀ» Á¦¿ÜÇÑ °¢ ÃþµéÀº 50´ÜÀ§·Î ¿Ã¸²ÇÏ¿© Àû¿ë ¹Ù¶ø´Ï´Ù
					// ex ) ½ÇÃøÄ¡ 2782 ==> 2800 À¸·Î, ½ÇÃøÄ¡ 2733 ==> 2750À¸·Î Àû¿ë
					tmpFLOORPRD = getFiftyRound(new Double(floorVo.getFLOORPRD()).doubleValue());
					floorVo.setFLOORPRD(tmpFLOORPRD);
					travelHeight = travelHeight + new Integer(tmpFLOORPRD).intValue();
				}
				allHeight = allHeight + new Integer(tmpFLOORPRD).intValue();
				
				// Ãþ°í°ª µî·ÏÇÔ
				outMap.put(floorVo.getFLOORNM(), floorVo.getFLOORPRD());
	        }

			String ELR_C_EHP = suvPrhMap.get("ELR_C_EHP");
			allHeight = allHeight + new Integer(getFiveTrunck(new Double(ELR_C_EHP).doubleValue())).intValue();
			ELC_C_EHTRH = new Integer(travelHeight).toString();
			FloorNmVO maxfloorVo = floorMap.get(maxFloor);
			ELR_C_EHO = maxfloorVo.getFLOORPRD();
			ELC_C_EHTH = new Integer(allHeight).toString();
			
			// ¿¬»ê½Ä »ý¼º
			outMap.put("ELR_C_EHO", ELR_C_EHO);
			outMap.put("ELC_C_EHTRH", ELC_C_EHTRH);
			outMap.put("ELC_C_EHTH", ELC_C_EHTH);
			
			// pitµµ 5´ÜÀ§ ¹ö¸²À¸·Î Àû¿ë
			outMap.put("ELR_C_EHP", getFiveTrunck(new Double(ELR_C_EHP).doubleValue()));
			
			// ½ÂÀå»ç¾ç ±×·ì µ¥ÀÌÅÍ¸¦ Á¶È¸ÇÑ´Ù.
			// Á¶È¸µÈ ±×·ìÀÌ 3°³ ÀÌ»óÀÌ¸é Ãþº° »ç¾ç½ÇÀû º¸Á¤Ã³¸®´Â ´ã´çÀÚ°¡ ¼öÇàÇÑ´Ù.
			List<Map> jambList = new ArrayList<Map>();
			List<Map> jambTmpList = dao.selectJampPrhSubPrhList(inMap);
			
			// ¸ÞÀÎ jAMBÀ» ¸ÕÀú Ãâ·Â ½ÃÅ°±â À§ÇØ Á¶È¸µÈ ¸®½ºÆ®¿¡¼­ ¼ø¼­¸¦ Á¶Á¤ÇÑ´Ù.
			// EL_EMF C123 ±âÁØÃþ(±âº»ÀÔ·Â)
            String EL_EMF = (String)inMap.get("EL_EMF");
            if(EL_EMF == null) {
            	EL_EMF = "1";
            } else {
            	if("".equals(EL_EMF)) {
                	EL_EMF = "1";
            	}
            }

            // ±âº»ÃþÀÌ Àû¿ëµÈ Àû¿ëÃþ ±×·ìÀ» Ã£´Â´Ù.
            // mainl ±×·ìÃþÀÌ ¸ÕÀú Ãâ·ÂµÇ¾î¾ß ÇÑ´Ù.
            int iMainIndex = 0;
            for(int i=0; i <jambTmpList.size(); i++) {
            	Map<String, Object> jampMap = jambTmpList.get(i);
            	String FLOORNM = (String)jampMap.get("FLOORNM");
            	String FLOORNMList[] = FLOORNM.split(",");
                if(FLOORNMList.length > 0 ) {
                	for(int j=0; j < FLOORNMList.length; j++) {
                    	if(FLOORNMList[j].equals(EL_EMF)) {
                    		iMainIndex = i;
                    		break;
                    	}
                	}
                } else {
                	if(FLOORNM.equals(EL_EMF)) {
                		iMainIndex = i;
                	}
                }
            }

            jambList.add(jambTmpList.get(iMainIndex));
            jambTmpList.remove(iMainIndex);
            for(int i=0; i <jambTmpList.size(); i++) {
            	Map<String, Object> jampMap = jambTmpList.get(i);
            	jambList.add(jampMap);
            }
			
			// ¸¸¾à Á¶È¸µÈ ±×·ìÀÌ 3°³ ÀÌ»óÀÌ¸é ½ÇÃø Ãþº°Àü°³ ºÒ°¡ ¸Þ½ÃÁö¸¦ Ãâ·ÂÇÑ´Ù.
			if(jambList.size() > 3) {
	            throw new BizException("»ý¼ºµÈ ÃâÀÔ±¸ ÀÇÀåµµ ±×·ì µ¥ÀÌÅÍ°¡ "+jambList.size()+"°³°¡ »ý¼ºµÇ¾î Ãþº° °ßÀû»ç¾çÀ» Àû¿ëÇÒ ¼ö ¾ø½À´Ï´Ù.");
			}

			for(int i=0; i <jambList.size(); i++) {
				@SuppressWarnings("unchecked")
				Map<String, Object> jampMap = jambList.get(i);
				String JAMBGRPNUM = new Integer(i+1).toString();
				String FLOOR   = (String)jampMap.get("FLOOR"); 
				String FLOORNM = (String)jampMap.get("FLOORNM");
				String JAMBMODEL = (String)jampMap.get("JAMBMODEL");
			    String HPIMODEL = (String)jampMap.get("HPIMODEL");
			    String HPBMODEL = (String)jampMap.get("HPBMODEL");
			    String HIPMODEL = (String)jampMap.get("HIPMODEL");
			    String HLTNMODEL = (String)jampMap.get("HLTNMODEL");
			    String FSWMODEL = (String)jampMap.get("FSWMODEL");

			    // JAMB ±×·ìÁ¤º¸ »ý¼º
			    outMap.put("ELC_E_CJM"+JAMBGRPNUM, JAMBMODEL);
			    
			    // Àû¿ëÃþ Á¤º¸¸¦ ±×·ìÇÎ Ã³¸®ÇØ¼­ µ¥ÀÌÅÍ¸¦ ¸¸µé¾î JAMB Àû¿ëÃþÀ» Àû¿ëÇØ¾ß ÇÑ´Ù.
			    String grpFloorNm = radFloorS.getGroupFloorNm(FLOOR, FLOORNM);
			    outMap.put("ELC_E_CJMF"+JAMBGRPNUM, grpFloorNm);
			    
			    // HPI µµ¸é»ý¼º µ¥ÀÌÅÍ¸¦ »ý¼ºÇÑ´Ù.
			    if(!"".equals(HPIMODEL)) {
			    	Map<String, Object> prdMap = null;
			    	// Á¦Ç°Ä¡¼ö µ¥ÀÌÅÍ¸¦ Á¶È¸ÇÑ´Ù.
			    	inMap.put("SUVATTR", HPIMODEL);
			    	prdMap = dao.selectHpiZPST1133(inMap);
                    
			    	if( prdMap == null ) {
			            throw new BizException("µî·ÏµÈ HPI("+HPIMODEL+") ¸ðµ¨Àº ¸®¸ðµ¨¸µ ÀÚµ¿µµ¸é »ý¼º ´ë»óÀÌ ¾Æ´Õ´Ï´Ù.");
			    	}
			    	
			    	// Á¦Ç°Á¤º¸
			    	String ELC_E_HPBX = (String)prdMap.get("ELC_E_HPBX");
			    	String ELC_E_HPW = (String)prdMap.get("ELC_E_HPW");
			    	String ELC_E_HPD = (String)prdMap.get("ELC_E_HPD");
			    	//String ELC_E_M_FORM = (String)prdMap.get("ELC_E_M_FORM");
			    	String ELC_E_BP_TYPE = (String)prdMap.get("ELC_E_BP_TYPE");
			    	if(ELC_E_HPBX == null) ELC_E_HPBX = "";
			    	
			    	if( "".equals(ELC_E_HPBX)) {
			            throw new BizException("µî·ÏµÈ HPI("+HPIMODEL+") ¸ðµ¨Àº ¸®¸ðµ¨¸µ ÀÚµ¿µµ¸é »ý¼º ´ë»óÀÌ ¾Æ´Õ´Ï´Ù.");
		    		} else {
		    			// hpi ½ÇÃø°ª
		    			String HPI_ELR_E_A = (String)jampMap.get("HPI_ELR_E_A");
		    			String HPI_ELR_E_B = (String)jampMap.get("HPI_ELR_E_B");
		    			
		    			// ½ÇÃø°ªÀÌ Á¸ÀçÇÏÁö ¾Ê´Â °æ¿ì Ã³¸®
		    			if(HPI_ELR_E_A == null) {
		    				// Á¦Ç°±Ô°Ý»çÀÌÁî Àû¿ë
		    				// ±×·ìÃ³¸®µÈ Á¦Ç° ±Ô°Ý¸¸ »ý¼ºÇÑ´Ù.
		    				outMap.put("ELC_E_HPI"+JAMBGRPNUM, HPIMODEL);
		    				outMap.put("ELC_E_HPBX"+JAMBGRPNUM, ELC_E_HPBX);
		    				outMap.put("ELC_E_HPW"+JAMBGRPNUM, ELC_E_HPW);
		    				outMap.put("ELC_E_HPD"+JAMBGRPNUM, ELC_E_HPD);
		    			} else {
		    				outMap.put("ELC_E_HPI"+JAMBGRPNUM, HPIMODEL);
		    				outMap.put("ELC_E_HPBX"+JAMBGRPNUM, ELC_E_HPBX);
		    				// hpi Á¦Ç°Á¤º¸
		    				outMap.put("ELC_E_HPW"+JAMBGRPNUM, ELC_E_HPW);
		    				outMap.put("ELC_E_HPD"+JAMBGRPNUM, ELC_E_HPD);
		    				// hpi ½ÇÃøÁ¤º¸
		    				outMap.put("ELC_E_HPA"+JAMBGRPNUM, HPI_ELR_E_A);
		    				outMap.put("ELC_E_HPB"+JAMBGRPNUM, HPI_ELR_E_B);
		    				
		    				// base Plate °è»ê°ª
		    				String sCalRslt[] = radEnterS.getCalBasePlate(HPI_ELR_E_A, HPI_ELR_E_B, ELC_E_HPW, ELC_E_HPD, "HPI", ELC_E_BP_TYPE);

		    				// º£ÀÌ½º ÇÃ·¹ÀÌÆ® Àû¿ë¿©ºÎ Ã¼Å©
                        	// ELC_E_HBW -- Á¦Ç°°¡·Î
                        	// ELC_E_HBD -- Á¦Ç°¼¼·Î
                        	double delcehpw = new Double(ELC_E_HPW).doubleValue();
                        	double delcehpd = new Double(ELC_E_HPD).doubleValue();
                        	double dcalRslt0 = new Double(sCalRslt[0]).doubleValue();
                        	double dcalRslt1 = new Double(sCalRslt[1]).doubleValue();

                        	// Á¦Ç°Ç¥ÁØ »çÀÌÁî°¡ º£ÀÌ½º ÇÃ·¹ÀÌÆ® ±âÁØÀ» ¸¸Á·ÇÏ¸é º£ÀÌ½º ÇÃ·¹ÀÌÆ® ±âÁØ°ªÀ» Àû¿ëÇÏÁö ¾Ê´Â´Ù.
                        	if((delcehpw >= dcalRslt0) && (delcehpd >= dcalRslt1)) {
                        	} else {
                        		sCalRslt = radEnterS.getCalBasePlateAdd(HPI_ELR_E_A, HPI_ELR_E_B, ELC_E_HPW, ELC_E_HPD, "HPI", ELC_E_BP_TYPE);
                                if("P".equals(ELC_E_BP_TYPE)) {
        		    				outMap.put("ELC_E_HPW"+JAMBGRPNUM, sCalRslt[0]);
        		    				outMap.put("ELC_E_HPD"+JAMBGRPNUM, sCalRslt[1]);
                                } else {
                            		// º£ÀÌ½º ÇÃ·¹ÀÌÆ®°¡ Àû¿ëµÈ °ª
                                	outMap.put("ELC_E_HPPW"+JAMBGRPNUM, sCalRslt[0]);
                                	outMap.put("ELC_E_HPPD"+JAMBGRPNUM, sCalRslt[1]);
                                }
                        	}
		    			}
		    		}                    
			    }

			    // HPB, HIP µµ¸é»ý¼º µ¥ÀÌÅÍ¸¦ »ý¼ºÇÑ´Ù.
			    if(!"".equals(HPBMODEL) || !"".equals(HIPMODEL)) {
			    	Map<String, Object> prdMap = null;
			    	// Á¦Ç°Ä¡¼ö µ¥ÀÌÅÍ¸¦ Á¶È¸ÇÑ´Ù.
			    	if(!"".equals(HPBMODEL)) {
				    	inMap.put("SUVATTR", HPBMODEL);
				    	prdMap = dao.selectHpbZPST1133(inMap);
			    	} else {
				    	inMap.put("SUVATTR", HIPMODEL);
				    	prdMap = dao.selectHipZPST1133(inMap);
			    	}

			    	if( prdMap == null) {
			            throw new BizException("µî·ÏµÈ HPB("+HPBMODEL+") ¸ðµ¨Àº ¸®¸ðµ¨¸µ ÀÚµ¿µµ¸é »ý¼º ´ë»óÀÌ ¾Æ´Õ´Ï´Ù.");
			    	}

			    	// Á¦Ç°Á¤º¸
			    	String ELC_E_HBBX = (String)prdMap.get("ELC_E_HBBX");
			    	String ELC_E_HBW = (String)prdMap.get("ELC_E_HBW");
			    	String ELC_E_HBD = (String)prdMap.get("ELC_E_HBD");
			    	String ELC_E_HBW_PKS = (String)prdMap.get("ELC_E_HBW_PKS");
			    	String ELC_E_HBD_PKS = (String)prdMap.get("ELC_E_HBD_PKS");
			    	//String ELC_E_M_FORM = (String)prdMap.get("ELC_E_M_FORM");
			    	String ELC_E_BP_TYPE = (String)prdMap.get("ELC_E_BP_TYPE");
			    	String EL_DPK = suvPrhMap.get("EL_DPK");

			    	if(EL_DPK == null) EL_DPK = "N";
                	if("Y".equals(EL_DPK)) {
	    				// ÆÄÅ·Å° Àû¿ë Á¦Ç°±Ô°Ý Àü´Þ
                		ELC_E_HBW = ELC_E_HBW_PKS;
                		ELC_E_HBD = ELC_E_HBD_PKS;
                	}

			    	if(ELC_E_HBBX == null) ELC_E_HBBX = ""; 
			    	
			    	if( "".equals(ELC_E_HBBX)) {
			            throw new BizException("µî·ÏµÈ HPB("+HPBMODEL+") ¸ðµ¨Àº ¸®¸ðµ¨¸µ ÀÚµ¿µµ¸é »ý¼º ´ë»óÀÌ ¾Æ´Õ´Ï´Ù.");
		    		} else {
		    			// base plate Àû¿ë ¿¬»ê Ã³¸®¸¦ ¼öÇàÇÑ´Ù.
		    			// ÆÄÅ·½ºÀ§Ä¡ Àû¿ë ¿©ºÎ ºÐ±â
		    			// hpb ½ÇÃø°ª
		    			String BTN_ELR_E_A = (String)jampMap.get("BTN_ELR_E_A");
		    			String BTN_ELR_E_B = (String)jampMap.get("BTN_ELR_E_B");
		    			String BTN_ELR_E_F = (String)jampMap.get("BTN_ELR_E_F");
		    			String BTN_ELC_E_CHB = (String)jampMap.get("BTN_ELC_E_CHB"); // ¿øÇü¹öÆ° Ãß°¡
		    			//String BTN_ELR_E_C = (String)jampMap.get("BTN_ELR_E_C");
		    			//String BTN_ELR_E_D = (String)jampMap.get("BTN_ELR_E_D");
		    			String BTN_ELR_E_E = (String)jampMap.get("BTN_ELR_E_E");
		    			if(BTN_ELR_E_A == null) BTN_ELR_E_A = "";
		    			if(BTN_ELR_E_E == null) BTN_ELR_E_E = "";
		    			
		    			// ÆÄÅ·½ºÀ§Ä¡ ½ÇÃø°ª
		    			String PKS_ELR_E_A = (String)jampMap.get("PKS_ELR_E_A");
		    			String PKS_ELR_E_B = (String)jampMap.get("PKS_ELR_E_B");
		    			String PKS_ELR_E_F = (String)jampMap.get("PKS_ELR_E_F");
		    			//String PKS_ELR_E_C = (String)jampMap.get("PKS_ELR_E_C");
		    			//String PKS_ELR_E_D = (String)jampMap.get("PKS_ELR_E_D");
		    			//String PKS_ELR_E_E = (String)jampMap.get("PKS_ELR_E_E");
	    				//  calWith, calHeigth »ý¼º¿Ï·á
		    			if(PKS_ELR_E_A == null) PKS_ELR_E_A = "";

		    			String modelType = "";
		    			if(!"".equals(HPBMODEL)) {
		    				modelType = "HPB";
		    				outMap.put("ELC_E_HB"+JAMBGRPNUM, HPBMODEL);
		    			} else {
		    				modelType = "HIP";
		    				outMap.put("ELC_E_HB"+JAMBGRPNUM, HIPMODEL);
		    			}

		    			// ¿øÇü¹öÆ° Å¸ÀÔ ¿¬»ê »ç¾ç°ª Á¤ÀÇ
		    			outMap.put("ELC_E_CHB"+JAMBGRPNUM, BTN_ELC_E_CHB);
		    			
		    			// ¸¸¾à ½ÇÃø°ªÀÌ ¾øÀ¸¸é Á¦Ç°±Ô°Ý¸¸ Àü´Þ
		    			if("".equals(BTN_ELR_E_A)) {
		    				outMap.put("ELC_E_HBBX"+JAMBGRPNUM, ELC_E_HBBX);
		    				outMap.put("ELC_E_HBW"+JAMBGRPNUM, ELC_E_HBW);
		    				outMap.put("ELC_E_HBD"+JAMBGRPNUM, ELC_E_HBD);
		    			} else {
		    				outMap.put("ELC_E_HBBX"+JAMBGRPNUM, ELC_E_HBBX);
		    				outMap.put("ELC_E_HBW"+JAMBGRPNUM, ELC_E_HBW);
		    				outMap.put("ELC_E_HBD"+JAMBGRPNUM, ELC_E_HBD);

		    				// ¹öÆ° ½ÇÃøÁ¤º¸
		    				outMap.put("ELC_E_HBA"+JAMBGRPNUM, BTN_ELR_E_A);
		    				outMap.put("ELC_E_HBB"+JAMBGRPNUM, BTN_ELR_E_B);
		    				
		    				String sCalRslt[] = null;
                            if("".equals(PKS_ELR_E_A)) {
                            	outMap.put("ELC_E_APK"+JAMBGRPNUM, "N");
                            	
                                if("Y".equals(BTN_ELC_E_CHB) && !"".equals(BTN_ELR_E_E)) {
                                	// ¿øÇü¹öÆ° 2°³ÀÎ °æ¿ì ¼¼·Î »çÀÌÁî´Â = BTN_ELR_E_A + BTN_ELR_E_E
                                	int cirHeigth = new Integer(BTN_ELR_E_A).intValue() + new Integer(BTN_ELR_E_E).intValue();
        		    				sCalRslt = radEnterS.getCalBasePlate(BTN_ELR_E_A, new Integer(cirHeigth).toString(), ELC_E_HBW, ELC_E_HBD, modelType, ELC_E_BP_TYPE);
                                } else {
        		    				// base Plate °è»ê°ª
        		    				sCalRslt = radEnterS.getCalBasePlate(BTN_ELR_E_A, BTN_ELR_E_B, ELC_E_HBW, ELC_E_HBD, modelType, ELC_E_BP_TYPE);
                                }
                            } else {
                            	outMap.put("ELC_E_APK"+JAMBGRPNUM, "Y");
    		    				// base Plate °è»ê°ª
                            	// 1. ELC_E_HBW_PKS
                            	// 2. ELC_E_HBD_PKS
                            	// 3. BTN_ELR_E_F
                            	// 4. PKS_ELR_E_A
                            	// 5. PKS_ELR_E_F
                            	// 6. ELC_E_HBW_PKS
                            	// 7. ELC_E_HBD_PKS
                            	// 8. modelType
                            	// 9. ELC_E_BP_TYPE
                            	// ÇØ´ç ·ÎÁ÷Àº Á»´õ »ìÆì ºÁ¾ß°Ú±¸³ª
                            	// BTN_ELR_E_EÀÌ Á¸ÀçÇÏ¸é ¹öÆ° 2°³ Â¥¸®·Î °£ÁÖÇÑ´Ù.
                                if("Y".equals(BTN_ELC_E_CHB) && !"".equals(BTN_ELR_E_E)) {
                                	// ¿øÇü¹öÆ° 2°³ÀÎ °æ¿ì ¼¼·Î »çÀÌÁî´Â = BTN_ELR_E_A + BTN_ELR_E_E
                                	int cirHeigth = new Integer(BTN_ELR_E_A).intValue() + new Integer(BTN_ELR_E_E).intValue();
                                	sCalRslt = radEnterS.getCalPksBasePlate(BTN_ELR_E_A, new Integer(cirHeigth).toString(), BTN_ELR_E_F, PKS_ELR_E_A, PKS_ELR_E_B, PKS_ELR_E_F
				                              , ELC_E_HBW_PKS, ELC_E_HBD_PKS, modelType, ELC_E_BP_TYPE);
                                } else {
                                	sCalRslt = radEnterS.getCalPksBasePlate(BTN_ELR_E_A, BTN_ELR_E_B, BTN_ELR_E_F, PKS_ELR_E_A, PKS_ELR_E_B, PKS_ELR_E_F
				                              , ELC_E_HBW_PKS, ELC_E_HBD_PKS, modelType, ELC_E_BP_TYPE);
                                }
                            }

                        	// º£ÀÌ½º ÇÃ·¹ÀÌÆ® Àû¿ë¿©ºÎ Ã¼Å©
                        	// ELC_E_HBW -- Á¦Ç°°¡·Î
                        	// ELC_E_HBD -- Á¦Ç°¼¼·Î
                        	double delcehbw = new Double(ELC_E_HBW).doubleValue();
                        	double delcehbd = new Double(ELC_E_HBD).doubleValue();
                        	double dcalRslt0 = new Double(sCalRslt[0]).doubleValue();
                        	double dcalRslt1 = new Double(sCalRslt[1]).doubleValue();

                        	//System.out.println("delcehbw:"+delcehbw+", dcalRslt0:"+dcalRslt0+", delcehbd:"+delcehbd+", dcalRslt1:"+dcalRslt1);
                        	// Á¦Ç°Ç¥ÁØ »çÀÌÁî°¡ º£ÀÌ½º ÇÃ·¹ÀÌÆ® ±âÁØÀ» ¸¸Á·ÇÏ¸é º£ÀÌ½º ÇÃ·¹ÀÌÆ® ±âÁØ°ªÀ» Àû¿ëÇÏÁö ¾Ê´Â´Ù.
                        	if((delcehbw >= dcalRslt0) && (delcehbd >= dcalRslt1)) {
                        	} else {
                                if("".equals(PKS_ELR_E_A)) {
                                	outMap.put("ELC_E_APK"+JAMBGRPNUM, "N");
                                    if("Y".equals(BTN_ELC_E_CHB) && !"".equals(BTN_ELR_E_E)) {
                                    	// ¿øÇü¹öÆ° 2°³ÀÎ °æ¿ì ¼¼·Î »çÀÌÁî´Â = BTN_ELR_E_A + BTN_ELR_E_E
                                    	int cirHeigth = new Integer(BTN_ELR_E_A).intValue() + new Integer(BTN_ELR_E_E).intValue();
            		    				sCalRslt = radEnterS.getCalBasePlateAdd(BTN_ELR_E_A, new Integer(cirHeigth).toString(), ELC_E_HBW, ELC_E_HBD, modelType, ELC_E_BP_TYPE);
                                    } else {
            		    				// base Plate °è»ê°ª
            		    				sCalRslt = radEnterS.getCalBasePlateAdd(BTN_ELR_E_A, BTN_ELR_E_B, ELC_E_HBW, ELC_E_HBD, modelType, ELC_E_BP_TYPE);
                                    }
                                } else {
                                	outMap.put("ELC_E_APK"+JAMBGRPNUM, "Y");
                                    if("Y".equals(BTN_ELC_E_CHB) && !"".equals(BTN_ELR_E_E)) {
                                    	// ¿øÇü¹öÆ° 2°³ÀÎ °æ¿ì ¼¼·Î »çÀÌÁî´Â = BTN_ELR_E_A + BTN_ELR_E_E
                                    	int cirHeigth = new Integer(BTN_ELR_E_A).intValue() + new Integer(BTN_ELR_E_E).intValue();
                                    	sCalRslt = radEnterS.getCalPksBasePlateAdd(BTN_ELR_E_A, new Integer(cirHeigth).toString(), BTN_ELR_E_F, PKS_ELR_E_A, PKS_ELR_E_B, PKS_ELR_E_F
    				                              , ELC_E_HBW_PKS, ELC_E_HBD_PKS, modelType, ELC_E_BP_TYPE);
                                    } else {
                                    	sCalRslt = radEnterS.getCalPksBasePlateAdd(BTN_ELR_E_A, BTN_ELR_E_B, BTN_ELR_E_F, PKS_ELR_E_A, PKS_ELR_E_B, PKS_ELR_E_F
    				                              , ELC_E_HBW_PKS, ELC_E_HBD_PKS, modelType, ELC_E_BP_TYPE);
                                    }
                                }
                                
                                if("P".equals(ELC_E_BP_TYPE)) {
        		    				outMap.put("ELC_E_HBW"+JAMBGRPNUM, sCalRslt[0]);
        		    				outMap.put("ELC_E_HBD"+JAMBGRPNUM, sCalRslt[1]);
                                } else {
                            		// º£ÀÌ½º ÇÃ·¹ÀÌÆ®°¡ Àû¿ëµÈ °ª
    								outMap.put("ELC_E_HBPW"+JAMBGRPNUM, sCalRslt[0]);
    								outMap.put("ELC_E_HBPD"+JAMBGRPNUM, sCalRslt[1]);
                                }
                        	}

    	    				// È¦¹öÆ° ³ôÀÌ --> Àå¾ÖÀÎ¿ë º°µµ Ã³¸® ·ÎÁ÷ »ðÀÔ
    	    				// Àå¾ÖÀÎÀÎ °æ¿ì¿¡¸¸ Ã³¸®
    	    				// EL_AUSE : HC(Àå¾Ö),  EH(ºñ»ó,Àå¾Ö), OH(Àü¸Á,Àå¾Ö), BH(º´¿ø,Àå¾Ö), NH(´©µå,Àå¾Ö), HF(ÀÎÈ­,Àå¾Ö)
                            // String EL_AUSE
    	    				String elAuse = (String)inMap.get("EL_AUSE");
                            if(elAuse == null) elAuse = "";
                            if("HC".equals(elAuse) || "EH".equals(elAuse) || "OH".equals(elAuse) || "BH".equals(elAuse) || "HF".equals(elAuse)) {
                            	// ¿À·ù Ã³¸®·ÎÁ÷ Ãß°¡
                            	if(BTN_ELR_E_F == null) BTN_ELR_E_F = "";
                            	if(BTN_ELR_E_B == null) BTN_ELR_E_B = "";

                			    // if(!"".equals(HPBMODEL) || !"".equals(HIPMODEL)) {
            			    	if( "".equals(BTN_ELR_E_F) || "".equals(BTN_ELR_E_B)) {
            			    		if( "".equals(BTN_ELR_E_F) && !"".equals(BTN_ELR_E_B)) {
                			            throw new BizException("È¦¹öÆ°(HPI, HBP)ÀÇ F ½ÇÃøÄ¡°ªÀÌ ¾ø¾î Àå¾ÖÀÎ È¦³ôÀÌ¸¦ °è»êÇÒ ¼ö ¾ø½À´Ï´Ù. È¦¹öÆ°(HPI, HBP) F ½ÇÃø°ªÀ» È®ÀÎÇØ ÁÖ½Ê½Ã¿ä.");
            			    		} if( !"".equals(BTN_ELR_E_F) && "".equals(BTN_ELR_E_B)) {
                			            throw new BizException("È¦¹öÆ°(HPI, HBP)ÀÇ B ½ÇÃøÄ¡°ªÀÌ ¾ø¾î Àå¾ÖÀÎ È¦³ôÀÌ¸¦ °è»êÇÒ ¼ö ¾ø½À´Ï´Ù. È¦¹öÆ°(HPI, HBP) B ½ÇÃø°ªÀ» È®ÀÎÇØ ÁÖ½Ê½Ã¿ä.");
            			    		} if( "".equals(BTN_ELR_E_F) && "".equals(BTN_ELR_E_B)) {
                			            throw new BizException("È¦¹öÆ°(HPI, HBP)ÀÇ B,F ½ÇÃøÄ¡°ªÀÌ ¾ø¾î Àå¾ÖÀÎ È¦³ôÀÌ¸¦ °è»êÇÒ ¼ö ¾ø½À´Ï´Ù. È¦¹öÆ°(HPI, HBP) B,F ½ÇÃø°ªÀ» È®ÀÎÇØ ÁÖ½Ê½Ã¿ä.");
                 			    	}                                 
            			    	}                       	
                            	// Àå¾ÖÀÎ ±âÁ¾ÀÎ °æ¿ì È¦³ôÀÌ¸¦ °è»êÇÑ´Ù.
        	    				String sNudeHeight = radEnterS.getNudeCalHeight(BTN_ELR_E_F, BTN_ELR_E_B);
        	    				outMap.put("ELC_E_HBF"+JAMBGRPNUM, sNudeHeight);
                            }
		    			}
		    		}
			    }

			    // È¦·£ÅÏ µµ¸é»ý¼º µ¥ÀÌÅÍ¸¦ »ý¼ºÇÑ´Ù.
			    if(!"".equals(HLTNMODEL)) {
			    	Map<String, Object> prdMap = null;
			    	// Á¦Ç°Ä¡¼ö µ¥ÀÌÅÍ¸¦ Á¶È¸ÇÑ´Ù.
			    	inMap.put("SUVATTR", HLTNMODEL);
			    	prdMap = dao.selectHltZPST1133(inMap);

			    	if( prdMap == null) {
			            throw new BizException("µî·ÏµÈ È¦·£ÅÏ("+HLTNMODEL+") ¸ðµ¨Àº ¸®¸ðµ¨¸µ ÀÚµ¿µµ¸é »ý¼º ´ë»óÀÌ ¾Æ´Õ´Ï´Ù.");
			    	}
			    	
			    	// Á¦Ç°Á¤º¸
			    	String ELC_E_HLBX = (String)prdMap.get("ELC_E_HLBX");
			    	String ELC_E_HLW = (String)prdMap.get("ELC_E_HLW");
			    	String ELC_E_HLD = (String)prdMap.get("ELC_E_HLD");
			    	String ELC_E_M_FORM = (String)prdMap.get("ELC_E_M_FORM");
			    	String ELC_E_BP_TYPE = (String)prdMap.get("ELC_E_BP_TYPE");
			    	if(ELC_E_HLBX == null) ELC_E_HLBX = "";

			    	if( "".equals(ELC_E_HLBX)) {
			            throw new BizException("µî·ÏµÈ È¦·£ÅÏ("+HLTNMODEL+") ¸ðµ¨Àº ¸®¸ðµ¨¸µ ÀÚµ¿µµ¸é »ý¼º ´ë»óÀÌ ¾Æ´Õ´Ï´Ù.");
		    		} else {
		    			String HLT_ELR_E_HLLC = (String)jampMap.get("HLT_ELR_E_HLLC");
		    			String HLT_ELR_E_A = (String)jampMap.get("HLT_ELR_E_A");
		    			String HLT_ELR_E_B = (String)jampMap.get("HLT_ELR_E_B");
		    			String HLT_ELR_E_F = (String)jampMap.get("HLT_ELR_E_F");
		    			String HLT_ELR_E_C = (String)jampMap.get("HLT_ELR_E_C");
		    			//String HLT_ELR_E_D = (String)jampMap.get("HLT_ELR_E_D");
		    			//String HLT_ELR_E_E = (String)jampMap.get("HLT_ELR_E_E");
		    			//String HLT_ELR_E_H = (String)jampMap.get("HLT_ELR_E_H");
		    			
		    			if(HLT_ELR_E_A == null) HLT_ELR_E_A = "";
		    			
		    			// ½ÇÃø°ªÀÌ ¾ø´Â °æ¿ì Ã³¸®
		    			if("".equals(HLT_ELR_E_A)) {
		    				outMap.put("ELC_E_HL"+JAMBGRPNUM, HLTNMODEL);
		    				// Á¦Ç°±Ô°Ý
		    				outMap.put("ELC_E_HLBX"+JAMBGRPNUM, ELC_E_HLBX);
		    				outMap.put("ELC_E_HLW"+JAMBGRPNUM, ELC_E_HLW);
		    				outMap.put("ELC_E_HLD"+JAMBGRPNUM, ELC_E_HLD);
		    				// È¦·£ÅÏ À§Ä¡
		    				// ¸¸¾à È¦¹öÅÏ À§Ä¡Ä¡ °ªÀÌ ¾ø´Â °æ¿ì´Â ?  EL_EHBLC: ÀÚµ¿µµ¸é È¦¹öÆ° À§Ä¡ -> ELR_H_BTNP
		    				if(HLT_ELR_E_HLLC == null) {
		    					HLT_ELR_E_HLLC = suvPrhMap.get("ELR_H_BTNP");
		    				}
		    				outMap.put("ELC_E_HLLC"+JAMBGRPNUM, HLT_ELR_E_HLLC);
		    			} else {
		    				outMap.put("ELC_E_HL"+JAMBGRPNUM, HLTNMODEL);
		    				// Á¦Ç°±Ô°Ý
		    				outMap.put("ELC_E_HLBX"+JAMBGRPNUM, ELC_E_HLBX);
		    				outMap.put("ELC_E_HLW"+JAMBGRPNUM, ELC_E_HLW);
		    				outMap.put("ELC_E_HLD"+JAMBGRPNUM, ELC_E_HLD);
		    				// ¸¸¾à È¦¹öÅÏ À§Ä¡Ä¡ °ªÀÌ ¾ø´Â °æ¿ì´Â ?  EL_EHBLC: ÀÚµ¿µµ¸é È¦¹öÆ° À§Ä¡ -> ELR_H_BTNP
		    				if(HLT_ELR_E_HLLC == null) {
		    					HLT_ELR_E_HLLC = suvPrhMap.get("ELR_H_BTNP");
		    				}
		    				
		    				// È¦·£ÅÏ À§Ä¡
		    				outMap.put("ELC_E_HLLC"+JAMBGRPNUM, HLT_ELR_E_HLLC);
		    				// Á¦Ç°±Ô°Ý	    			
		    				// Á¦Ç° ¸ð¾çÀÌ ´Ù¸¥ °æ¿ì Á¦Ç°±Ô°Ý Á¤ÀÇ°¡ ´Þ¶óÁø´Ù.
		    				if("C".equals(ELC_E_M_FORM)) {
		    				    // ¿øÇüÀÎ °æ¿ì Ãß°¡µÇ´Â ½ÇÃø
		    					outMap.put("ELC_E_HLF"+JAMBGRPNUM, HLT_ELR_E_F);
		    					outMap.put("ELC_E_HLC"+JAMBGRPNUM, HLT_ELR_E_C);
		    				} else {
		    					// »ç°¢ÇüÀÎ °æ¿ì Ãß°¡µÇ´Â ½ÇÃø
		    					outMap.put("ELC_E_HLA"+JAMBGRPNUM, HLT_ELR_E_A);
		    					outMap.put("ELC_E_HLB"+JAMBGRPNUM, HLT_ELR_E_B);
			    				
			    				// º£ÀÌ½ºÇÃ·¹ÀÌÆ® Àû¿ë
			    				// base Plate °è»ê°ª
			    				String sCalRslt[] = radEnterS.getCalBasePlate(HLT_ELR_E_A, HLT_ELR_E_B, ELC_E_HLW, ELC_E_HLD, "HLT", ELC_E_BP_TYPE);

	                            // PLATE Àû¿ë Å¸ÀÔ P: ÇÃ·¹ÀÌÆ® ¹ÌÀû¿ë - Á¦Ç°»çÀÌÁî·Î ´ëÃ¼, N: ÇÃ·¹ÀÌÆ® ¹ÌÀû¿ë
                            	// º£ÀÌ½º ÇÃ·¹ÀÌÆ® Àû¿ë¿©ºÎ Ã¼Å©
                            	// ELC_E_HLW -- Á¦Ç°°¡·Î
                            	// ELC_E_HLD -- Á¦Ç°¼¼·Î
                            	double delcehlw = new Double(ELC_E_HLW).doubleValue();
                            	double delcehhld = new Double(ELC_E_HLD).doubleValue();
                            	double dcalRslt0 = new Double(sCalRslt[0]).doubleValue();
                            	double dcalRslt1 = new Double(sCalRslt[1]).doubleValue();
                            	// Á¦Ç°Ç¥ÁØ »çÀÌÁî°¡ º£ÀÌ½º ÇÃ·¹ÀÌÆ® ±âÁØÀ» ¸¸Á·ÇÏ¸é º£ÀÌ½º ÇÃ·¹ÀÌÆ® ±âÁØ°ªÀ» Àû¿ëÇÏÁö ¾Ê´Â´Ù.
                            	if((delcehlw >= dcalRslt0) && (delcehhld >= dcalRslt1)) {
                            	} else {
                            		sCalRslt = radEnterS.getCalBasePlateAdd(HLT_ELR_E_A, HLT_ELR_E_B, ELC_E_HLW, ELC_E_HLD, "HLT", ELC_E_BP_TYPE);
                                    if("P".equals(ELC_E_BP_TYPE)) {
            		    				outMap.put("ELC_E_HLW"+JAMBGRPNUM, sCalRslt[0]);
            		    				outMap.put("ELC_E_HLD"+JAMBGRPNUM, sCalRslt[1]);
                                    } else {
                                		// º£ÀÌ½º ÇÃ·¹ÀÌÆ®°¡ Àû¿ëµÈ °ª
                                		outMap.put("ELC_E_HLPW"+JAMBGRPNUM, sCalRslt[0]);
    	                            	outMap.put("ELC_E_HLPD"+JAMBGRPNUM, sCalRslt[1]);
                                    }
                            	}
		    				}
		    			}
		    		}
			    }

			    // ¼Ò¹æ½ºÀ§Ä¡ µµ¸é»ý¼º µ¥ÀÌÅÍ¸¦ »ý¼ºÇÑ´Ù.
			    if(!"".equals(FSWMODEL)) {
			    	Map<String, Object> prdMap = null;
			    	// Á¦Ç°Ä¡¼ö µ¥ÀÌÅÍ¸¦ Á¶È¸ÇÑ´Ù.
			    	inMap.put("SUVATTR", FSWMODEL);
			    	prdMap = dao.selectFswZPST1133(inMap);

			    	if( prdMap == null) {
			            throw new BizException("µî·ÏµÈ ¼Ò¹æ½ºÀ§Ä¡("+FSWMODEL+") ¸ðµ¨Àº ¸®¸ðµ¨¸µ ÀÚµ¿µµ¸é »ý¼º ´ë»óÀÌ ¾Æ´Õ´Ï´Ù.");
			    	}
			    	
			    	String ELC_E_FSBX = (String)prdMap.get("ELC_E_FSBX");
			    	String ELC_E_FSW = (String)prdMap.get("ELC_E_FSW");
			    	String ELC_E_FSD = (String)prdMap.get("ELC_E_FSD");
			    	//String ELC_E_M_FORM = (String)prdMap.get("ELC_E_M_FORM");
			    	String ELC_E_BP_TYPE = (String)prdMap.get("ELC_E_BP_TYPE");
			    	if(ELC_E_FSBX == null) ELC_E_FSBX = "";
			    	
			    	if( "".equals(ELC_E_FSBX)) {
			            throw new BizException("µî·ÏµÈ ¼Ò¹æ½ºÀ§Ä¡("+FSWMODEL+") ¸ðµ¨Àº ¸®¸ðµ¨¸µ ÀÚµ¿µµ¸é »ý¼º ´ë»óÀÌ ¾Æ´Õ´Ï´Ù.");
		    		} else {
		    			
		    			String FSW_ELR_E_FSLC = (String)jampMap.get("FSW_ELR_E_FSLC");
		    	        String FSW_ELR_E_A = (String)jampMap.get("FSW_ELR_E_A");
		    	        String FSW_ELR_E_B = (String)jampMap.get("FSW_ELR_E_B");
		    	        //String FSW_ELR_E_F = (String)jampMap.get("FSW_ELR_E_F");
		    	        //String FSW_ELR_E_C = (String)jampMap.get("FSW_ELR_E_C");
		    	        //String FSW_ELR_E_D = (String)jampMap.get("FSW_ELR_E_D");
		    	        //String FSW_ELR_E_E = (String)jampMap.get("FSW_ELR_E_E");
                        if( FSW_ELR_E_A == null) FSW_ELR_E_A = "";
                        
                        if("".equals(FSW_ELR_E_A)) {
                            // ½ÇÃøÄ¡°¡ ¾ø´Â °æ¿ì
                        	// ¼Ò¹æ½ºÀ§Ä¡ Á¦Ç°Á¤º¸
                        	outMap.put("ELC_E_FSBX"+JAMBGRPNUM, ELC_E_FSBX);
                        	outMap.put("ELC_E_FSW"+JAMBGRPNUM, ELC_E_FSW);
                        	outMap.put("ELC_E_FSD"+JAMBGRPNUM, ELC_E_FSD);
                        } else {
                        	// ½ÇÃøÄ¡°¡ ÀÖ´Â °æ¿ì Àû¿ë
                        	// ¼Ò¹æ½ºÀ§Ä¡ Á¦Ç°Á¤º¸
                        	outMap.put("ELC_E_FSBX"+JAMBGRPNUM, ELC_E_FSBX);
                        	outMap.put("ELC_E_FSW"+JAMBGRPNUM, ELC_E_FSW);
                        	outMap.put("ELC_E_FSD"+JAMBGRPNUM, ELC_E_FSD);

    	    				// ¼Ò¹æ½ºÀ§Ä¡ ½ÇÃøÁ¤º¸
                        	outMap.put("ELC_E_FSA"+JAMBGRPNUM, FSW_ELR_E_A);
                        	outMap.put("ELC_E_FSB"+JAMBGRPNUM, FSW_ELR_E_B);
                        	outMap.put("ELC_E_FSLC"+JAMBGRPNUM, FSW_ELR_E_FSLC);
    	    				
		    				// º£ÀÌ½ºÇÃ·¹ÀÌÆ® Àû¿ë
		    				// base Plate °è»ê°ª
		    				String sCalRslt[] = radEnterS.getCalBasePlate(FSW_ELR_E_A, FSW_ELR_E_B, ELC_E_FSW, ELC_E_FSD, "FSW", ELC_E_BP_TYPE);

                            // PLATE Àû¿ë Å¸ÀÔ P: ÇÃ·¹ÀÌÆ® ¹ÌÀû¿ë - Á¦Ç°»çÀÌÁî·Î ´ëÃ¼, N: ÇÃ·¹ÀÌÆ® ¹ÌÀû¿ë
                        	// º£ÀÌ½º ÇÃ·¹ÀÌÆ® Àû¿ë¿©ºÎ Ã¼Å©
                        	// ELC_E_FSW-- Á¦Ç°°¡·Î
                        	// ELC_E_FSD-- Á¦Ç°¼¼·Î
                        	double delcefsw = new Double(ELC_E_FSW).doubleValue();
                        	double delcefsd = new Double(ELC_E_FSD).doubleValue();
                        	double dcalRslt0 = new Double(sCalRslt[0]).doubleValue();
                        	double dcalRslt1 = new Double(sCalRslt[1]).doubleValue();
                        	// Á¦Ç°Ç¥ÁØ »çÀÌÁî°¡ º£ÀÌ½º ÇÃ·¹ÀÌÆ® ±âÁØÀ» ¸¸Á·ÇÏ¸é º£ÀÌ½º ÇÃ·¹ÀÌÆ® ±âÁØ°ªÀ» Àû¿ëÇÏÁö ¾Ê´Â´Ù.
                        	if((delcefsw >= dcalRslt0) && (delcefsd >= dcalRslt1)) {
                        	} else {
                        		sCalRslt = radEnterS.getCalBasePlateAdd(FSW_ELR_E_A, FSW_ELR_E_B, ELC_E_FSW, ELC_E_FSD, "FSW", ELC_E_BP_TYPE);
                                if("P".equals(ELC_E_BP_TYPE)) {
                                	outMap.put("ELC_E_FSW"+JAMBGRPNUM, sCalRslt[0]);
                                	outMap.put("ELC_E_FSD"+JAMBGRPNUM, sCalRslt[1]);
                                } else {
                            		// º£ÀÌ½º ÇÃ·¹ÀÌÆ®°¡ Àû¿ëµÈ °ª
                            		outMap.put("ELC_E_FSPW"+JAMBGRPNUM, sCalRslt[0]);
                                	outMap.put("ELC_E_FSPD"+JAMBGRPNUM, sCalRslt[1]);
                                }
                        	}
                        }
		    		}
			    }
			}

			//½ÂÀåµµ¾îÆÇ³Ú³ôÀÌ Á¶È¸ ELC_E_PNLH
			Map<String, Object> eMap = dao.selectElrEPnlh(inMap);
			String ELR_E_PNLH = (String)eMap.get("ELR_E_PNLH");
			String ELC_E_PNLHDEGR = (String)eMap.get("ELC_E_PNLHDEGR");
			// ÃâÀÔ±¸ ³ôÀÌ
			String ELR_H_HH = suvPrhMap.get("ELR_H_HH");
			outMap.put("ELC_E_PNLHDEGR", ELC_E_PNLHDEGR);
			if(ELR_E_PNLH != null) {
				if(!"".equals(ELR_E_PNLH)) {
					int iELR_E_PNLH = new Integer(ELR_E_PNLH).intValue();
				    int iELR_H_HH = new Integer(ELR_H_HH).intValue();
                    // 10´ÜÀ§ ¹ö¸² º¸Á¤°ª
				    String sCELR_H_HH = getTenTrunck(iELR_H_HH);
				    int iCELR_H_HH = new Integer(sCELR_H_HH).intValue();
				    if(iELR_E_PNLH <= (iELR_H_HH + 50) ) {
				    	// 10´ÜÀ§ ³»¸² º¸Á¤°ªÀ¸·Î Ã³¸®ÇÑ´Ù.
				    	iELR_E_PNLH = iCELR_H_HH + 30;
				    	outMap.put("ELC_E_PNLH", new Integer(iELR_E_PNLH).toString());
				    } else {
				    	// 10´ÜÀ§ ³»¸² º¸Á¤°ªÀ¸·Î Ã³¸®ÇÑ´Ù.
				    	iELR_E_PNLH = iCELR_H_HH + 80;
				    	outMap.put("ELC_E_PNLH", new Integer(iELR_E_PNLH).toString());
				    }
				}
			}

			// EL_DJM	K017 \(Àç»ç¿ë) JAMB(MAIN)
			// EL_DJO	K018 \(Àç»ç¿ë) JAMB(OTHER)
			// ELR_H_JJ	JJ CH-HH ÀÏÁ¤¹üÀ§¾È¿¡ ÀÖ¾î¾ßÇÔ
			// ELR_H_HH	HH
            // 50´ÜÀ§ ¹Ý¿Ã¸²
			
			// ¸ÕÀú ±âÁ¸ »ý¼ºµÈ µ¥ÀÌÅÍ¸¦ »èÁ¦ÇÏ°í ÀúÀåÃ³¸®¸¦ ¼öÇàÇÑ´Ù.
			dao.deleteEnterElcData(inMap);
			// »ý¼ºµÈ °á°ú°ªÀ» ¿¬»ê½Ä¿¡ ÀúÀåÇÑ´Ù.
			Map<String, Object> suvPrdMap = new HashMap<String, Object>();
			suvPrdMap.put("MANDT", inMap.get("MANDT"));
			suvPrdMap.put("SUVSN", inMap.get("SUVSN"));
			suvPrdMap.put("USER_NAME", inMap.get("G_USER_NAME"));
			suvPrdMap.put("SUVTYPE", "E");

			for( String key : outMap.keySet() ) {
				// ¿¬»êµÈ °á°ú¸¦ ÀúÀåÇÑ´Ù.
				suvPrdMap.put("SUVPRH", key);
				Object calPrd = outMap.get(key);
				if(calPrd == null) {
					suvPrdMap.put("CALPRD", "");
				} else {
					suvPrdMap.put("CALPRD", outMap.get(key));
				}
				dao.insertCalZPST1136(suvPrdMap);
	        }
			session.commit();
		} catch (Exception e) {
			session.rollback();
			throw e;
		} finally {
			session.close();
		}
	}

	/**
	 * 
	 * ¿µ¾÷»ç¾ç ¹× ½ÇÃø ¿¬»ê°á°ú ¹× Á¶Á¤°ª ÀúÀå
	 * @throws SQLException 
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	public void saveCalModyPrd(List<Map> calList, List<Map> modyList) throws Exception {
		SqlSession session =  sqlSessionFactory.openSession(false);
		session.getConnection().setAutoCommit(false);
		dao = session.getMapper(RadSurveyD.class);
		try {
			for(int i=0; i < calList.size(); i++) {
				Map inMap = calList.get(i);
				dao.insertCalZPST1136(inMap);
			}

			for(int i=0; i < modyList.size(); i++) {
				Map inMap = modyList.get(i);
				dao.updateModyPST1136(inMap);
			}
			session.commit();
		} catch (Exception e) {
			session.rollback();
			throw e;
		} finally {
			session.close();
		}
	}
	
	/**
	 * 
	 * ¿µ¾÷»ç¾ç°ª ³»¿ª Á¶È¸
	 * @throws SQLException 
	 */
	public String selectATWTB(Map<String, Object> inMap) throws Exception {
		String ATWTB;
		SqlSession session =  sqlSessionFactory.openSession(false);
		session.getConnection().setAutoCommit(false);
		dao = session.getMapper(RadSurveyD.class);
		try {
			ATWTB = dao.selectATWTB(inMap);
		} catch (Exception e) {
			throw e;
		} finally {
			session.close();
		}
		return ATWTB;
	}

	
	/**
	 * 
	 * ½ÇÃø°ª ¿¢¼¿ µ¥ÀÌÅÍ Á¶È¸
	 * @throws SQLException 
	 */
	public Map<String, Object> selectRadExcelData(Map<String, Object> inMap, XLSTransformer xls) throws Exception {
		Map<String, Object> inputData = new HashMap<String, Object>();
		SqlSession session =  sqlSessionFactory.openSession(false);
		session.getConnection().setAutoCommit(false);
		dao = session.getMapper(RadSurveyD.class);
		List<HashMap<String, Object>> hogiMapList = null;

		// ½Â°­·Î ºÎºÐ
		HashMap<String, String> masterHMap = new HashMap<String, String>();
		// ±â°è½ÇºÎºÐ
		HashMap<String, String> masterMMap = new HashMap<String, String>();
		// CWT, ½ÂÀå¸¶½ºÅÍ
		HashMap<String, String> masterCEMap = new HashMap<String, String>();
		// ½Â°­·Î ºÎºÐ (ÁÂÈ¾¶ô ºÐ¸®)
		HashMap<String, String> masterLdHMap = new HashMap<String, String>();
		// ½Â°­·Î ºÎºÐ (ÁÂÈ¾¶ô °ø¿ë)
		HashMap<String, String> masterLcHMap = new HashMap<String, String>();
		// ±â°è½Ç ºÎºÐ (ÁÂÈ¾¶ô ºÐ¸®,°ø¿ë)
		HashMap<String, String> masterLcMMap = new HashMap<String, String>();
		// ½Â°­·Î ºÎºÐ (¿ìÈ¾¶ô ºÐ¸®))
		HashMap<String, String> masterRdHMap = new HashMap<String, String>();
		// ½Â°­·Î ºÎºÐ (¿ìÈ¾¶ô °ø¿ë)
		HashMap<String, String> masterRcHMap = new HashMap<String, String>();
		// ±â°è½Ç ºÎºÐ (¿ìÈ¾¶ô ºÐ¸®,°ø¿ë))
		HashMap<String, String> masterRcMMap = new HashMap<String, String>();

		// ½Â°­·ÎºÎºÐ
		List<HashMap<String, Object>> hMapList = new ArrayList<HashMap<String, Object>>();
		// ±â°è½ÇºÎºÐ
		List<HashMap<String, Object>> mMapList = new ArrayList<HashMap<String, Object>>();
		// CWT-½ÂÀå
		List<HashMap<String, Object>> ceMapList = new ArrayList<HashMap<String, Object>>();
		// Ãþ°í µ¥ÀÌÅÍ
		Map<String, Object> floorMap = new HashMap<String, Object>();
		Map<Integer, Object> floorTmpMap = new HashMap<Integer, Object>();
		List<HashMap<String, Object>> floorList = new ArrayList<HashMap<String, Object>>();
		
		// Ç¥½Ã±â µ¥ÀÌÅÍ		
		List<HashMap<String, Object>> viewMapList = new ArrayList<HashMap<String, Object>>();
		// Jamb µ¥ÀÌÅÍ		
		List<HashMap<String, Object>> jambMapList = new ArrayList<HashMap<String, Object>>();

		// ½Â°­·Î ºÎºÐ (ÁÂÈ¾¶ô ºÐ¸®)
		List<HashMap<String, Object>> ldhMapList = new ArrayList<HashMap<String, Object>>();
		// ½Â°­·Î ºÎºÐ (ÁÂÈ¾¶ô °ø¿ë)
		List<HashMap<String, Object>> lchMapList = new ArrayList<HashMap<String, Object>>();
		// ±â°è½Ç ºÎºÐ (ÁÂÈ¾¶ô ºÐ¸®,°ø¿ë)
		List<HashMap<String, Object>> lmMapList = new ArrayList<HashMap<String, Object>>();
		
		// ½Â°­·Î ºÎºÐ (¿ìÈ¾¶ô ºÐ¸®))
		List<HashMap<String, Object>> rdhMapList = new ArrayList<HashMap<String, Object>>();
		// ½Â°­·Î ºÎºÐ (¿ìÈ¾¶ô °ø¿ë)
		List<HashMap<String, Object>> rchMapList = new ArrayList<HashMap<String, Object>>();
		// ±â°è½Ç ºÎºÐ (¿ìÈ¾¶ô ºÐ¸®,°ø¿ë))
		List<HashMap<String, Object>> rmMapList = new ArrayList<HashMap<String, Object>>();

		try {
			if(inMap.get("PRJNUM") != null) {
			    // ¼öÁÖ ½Ã ½ÇÃø°ª ¿¢¼¿ µ¥ÀÌÅÍ Á¶È¸
				hogiMapList = dao.selectOrderHGList(inMap);
			} else {
			    // °ßÀû ½Ã ½ÇÃø°ª ¿¢¼¿ µ¥ÀÌÅÍ Á¶È¸
				hogiMapList = dao.selectQtHGList(inMap);
			}
			
			if(hogiMapList.size() == 0) return inputData;
			// ½Â°­·Î ºÎºÐ
			masterHMap.put("PRJNUM", (String)hogiMapList.get(0).get("PRJNUM"));
			masterHMap.put("GSNAM", (String)hogiMapList.get(0).get("GSNAM"));
			masterHMap.put("SUVNAM", "");
			masterHMap.put("SUVDAT", "");
			masterHMap.put("HOGI", "");
			masterHMap.put("UPS", "");
			// ±â°è½ÇºÎºÐ
			masterMMap.put("PRJNUM", (String)hogiMapList.get(0).get("PRJNUM"));
			masterMMap.put("GSNAM", (String)hogiMapList.get(0).get("GSNAM"));
			masterMMap.put("SUVNAM", "");
			masterMMap.put("SUVDAT", "");
			masterMMap.put("HOGI", "");
			masterMMap.put("UPS", "");
			// CWT, ½ÂÀå¸¶½ºÅÍ
			masterCEMap.put("PRJNUM", (String)hogiMapList.get(0).get("PRJNUM"));
			masterCEMap.put("GSNAM", (String)hogiMapList.get(0).get("GSNAM"));
			masterCEMap.put("SUVNAM", "");
			masterCEMap.put("SUVDAT", "");
			masterCEMap.put("HOGI", "");
			masterCEMap.put("UPS", "");
			
			// ½Â°­·Î ºÎºÐ (ÁÂÈ¾¶ô ºÐ¸®)
			masterLdHMap.put("PRJNUM", (String)hogiMapList.get(0).get("PRJNUM"));
			masterLdHMap.put("GSNAM", (String)hogiMapList.get(0).get("GSNAM"));
			masterLdHMap.put("SUVNAM", "");
			masterLdHMap.put("SUVDAT", "");
			masterLdHMap.put("HOGI", "");
			masterLdHMap.put("UPS", "");
			
			// ½Â°­·Î ºÎºÐ (ÁÂÈ¾¶ô °ø¿ë)
			masterLcHMap.put("PRJNUM", (String)hogiMapList.get(0).get("PRJNUM"));
			masterLcHMap.put("GSNAM", (String)hogiMapList.get(0).get("GSNAM"));
			masterLcHMap.put("SUVNAM", "");
			masterLcHMap.put("SUVDAT", "");
			masterLcHMap.put("HOGI", "");
			masterLcHMap.put("UPS", "");
			
			// ±â°è½Ç ºÎºÐ (ÁÂÈ¾¶ô ºÐ¸®,°ø¿ë)
			masterLcMMap.put("PRJNUM", (String)hogiMapList.get(0).get("PRJNUM"));
			masterLcMMap.put("GSNAM", (String)hogiMapList.get(0).get("GSNAM"));
			masterLcMMap.put("SUVNAM", "");
			masterLcMMap.put("SUVDAT", "");
			masterLcMMap.put("HOGI", "");
			masterLcMMap.put("UPS", "");
			
			// ½Â°­·Î ºÎºÐ (¿ìÈ¾¶ô ºÐ¸®))
			masterRdHMap.put("PRJNUM", (String)hogiMapList.get(0).get("PRJNUM"));
			masterRdHMap.put("GSNAM", (String)hogiMapList.get(0).get("GSNAM"));
			masterRdHMap.put("SUVNAM", "");
			masterRdHMap.put("SUVDAT", "");
			masterRdHMap.put("HOGI", "");
			masterRdHMap.put("UPS", "");
			
			// ½Â°­·Î ºÎºÐ (¿ìÈ¾¶ô °ø¿ë)
			masterRcHMap.put("PRJNUM", (String)hogiMapList.get(0).get("PRJNUM"));
			masterRcHMap.put("GSNAM", (String)hogiMapList.get(0).get("GSNAM"));
			masterRcHMap.put("SUVNAM", "");
			masterRcHMap.put("SUVDAT", "");
			masterRcHMap.put("HOGI", "");
			masterRcHMap.put("UPS", "");
			
			// ±â°è½Ç ºÎºÐ (¿ìÈ¾¶ô ºÐ¸®,°ø¿ë))
			masterRcMMap.put("PRJNUM", (String)hogiMapList.get(0).get("PRJNUM"));
			masterRcMMap.put("GSNAM", (String)hogiMapList.get(0).get("GSNAM"));
			masterRcMMap.put("SUVNAM", "");
			masterRcMMap.put("SUVDAT", "");
			masterRcMMap.put("HOGI", "");
			masterRcMMap.put("UPS", "");
 
			String suvDat = "";
			String hogi = "";
			String suvnam = "";
			String ups = "";

			HashMap<String, String> cmpMap = new HashMap<String, String>();
			HashMap<String, String> rmHogiMap = new HashMap<String, String>();
			HashMap<String, String> inHogiMap = new HashMap<String, String>();
			for(int i=0; i < hogiMapList.size(); i++) {
				Map<String, Object> pramMap = hogiMapList.get(i);
				String suvDatTmp = (String)pramMap.get("SUVDAT");
				String hogiTmp = (String)pramMap.get("HOGI");
				
				String suvnamTmp = (String)pramMap.get("SUVNAM");
				String upsTmp = ""; 
				String ecwtp = (String)pramMap.get("ECWTP");
				String ebrk = (String)pramMap.get("CBRK");
				String dong = "";
				if(ecwtp == null) ecwtp = "";
				if(ebrk == null) ebrk = "";
				if(suvDatTmp == null) suvDatTmp = "";
				
				// ½Â°­·ÎºÎºÐ-±â°è½Ç ºÎºÐ-CWT»ó¼¼-Ãþ°í Á¶È¸
				List<HashMap<String, Object>> suvDataList = dao.selectSuvDataList(pramMap);
				// ¸®½ºÆ® µ¥ÀÌÅÍ ¸Êµ¥ÀÌÅÍ º¯°æ
				HashMap<String, Object> suvHDataMap = new HashMap<String, Object>();
				HashMap<String, Object> suvCEDataMap = new HashMap<String, Object>();
				HashMap<String, Object> suvMDataMap = new HashMap<String, Object>();
				for(int j=0; j < suvDataList.size(); j++) {
					// ÄÚµå ¸ÅÇÎ°ªÀ¸·Î ´ëÃ¼ÇÑ´Ù.
					String itemdiv = (String)suvDataList.get(j).get("ITEMDIV");
					if("M".equals(itemdiv)) {
						suvMDataMap.put((String)suvDataList.get(j).get("SUVPRH"), suvDataList.get(j).get("SUVPRDNAME"));
					} else if("B".equals(itemdiv) || "H".equals(itemdiv)) {
						suvHDataMap.put((String)suvDataList.get(j).get("SUVPRH"), suvDataList.get(j).get("SUVPRDNAME"));
					} else {
						// CWT, ½ÂÀå µ¥ÀÌÅÍ
						suvCEDataMap.put((String)suvDataList.get(j).get("SUVPRH"), suvDataList.get(j).get("SUVPRDNAME"));
					}
				}
				dong = (String)suvHDataMap.get("ELR_H_ELVDONG");
				if(dong == null) {
					dong = hogiTmp;
				} else {
					if(dong.equals("")) {
						dong = hogiTmp;
					}
				}
				
				suvHDataMap.put("ELR_H_ELVDONG", dong);
				suvCEDataMap.put("ELR_H_ELVDONG", dong);
				suvMDataMap.put("ELR_H_ELVDONG", dong);
				upsTmp = suvHDataMap.get("ELR_H_AUSE")+"/"+suvHDataMap.get("ELR_H_AMAN")+"/"+suvHDataMap.get("ELR_H_ASPD");
				if(suvDatTmp.length() == 8) {
					suvDatTmp = suvDatTmp.substring(0,4)+"."+suvDatTmp.substring(4,6)+"."+suvDatTmp.substring(6,8);
				}

				// ½Â°­·Î ±â°è½Ç µ¥ÀÌÅÍ »ý¼º
				if("R".equals(ecwtp)) {
                    // ½Â°­·Î ºÎºÐ, ±â°è½Ç ºÎºÐ
					hMapList.add(suvHDataMap);
					mMapList.add(suvMDataMap);

					suvDat = masterHMap.get("SUVDAT") + ", "+suvDatTmp;
					hogi = masterHMap.get("HOGI") + ", "+hogiTmp;
					
					suvnam = masterHMap.get("SUVNAM") + ", "+suvnamTmp;
					ups = masterHMap.get("UPS") + ", "+upsTmp;
					masterHMap.put("SUVDAT", suvDat);
					masterHMap.put("HOGI", hogi);
					masterHMap.put("SUVNAM", suvnam);
					masterHMap.put("UPS", ups);
					
					masterMMap.put("SUVDAT", suvDat);
					masterMMap.put("HOGI", hogi);
					masterMMap.put("SUVNAM", suvnam);
					masterMMap.put("UPS", ups);
					
				} else if("F/L".equals(ecwtp) || "R/L".equals(ecwtp)) { //FRONT LEFT, // REAR LEFT
					if("Y".equals(ebrk)) {
						lchMapList.add(suvHDataMap);
						suvDat = masterLcHMap.get("SUVDAT") + ", "+suvDatTmp;
						hogi = masterLcHMap.get("HOGI") + ", "+hogiTmp;
						suvnam = masterLcHMap.get("SUVNAM") + ", "+suvnamTmp;
						ups = masterLcHMap.get("UPS") + ", "+upsTmp;
						masterLcHMap.put("SUVDAT", suvDat);
						masterLcHMap.put("HOGI", hogi);
						masterLcHMap.put("SUVNAM", suvnam);
						masterLcHMap.put("UPS", ups);
					} else {
						ldhMapList.add(suvHDataMap);
						suvDat = masterLdHMap.get("SUVDAT") + ", "+suvDatTmp;
						hogi = masterLdHMap.get("HOGI") + ", "+hogiTmp;
						suvnam = masterLdHMap.get("SUVNAM") + ", "+suvnamTmp;
						ups = masterLdHMap.get("UPS") + ", "+upsTmp;
						masterLdHMap.put("SUVDAT", suvDat);
						masterLdHMap.put("HOGI", hogi);
						masterLdHMap.put("SUVNAM", suvnam);
						masterLdHMap.put("UPS", ups);
					}
					lmMapList.add(suvMDataMap);
					masterLcMMap.put("SUVDAT", suvDat);
					masterLcMMap.put("HOGI", hogi);
					masterLcMMap.put("SUVNAM", suvnam);
					masterLcMMap.put("UPS", ups);
				} else if("F/R".equals(ecwtp) || "R/R".equals(ecwtp)) { //FRONT RIGHT, // REAR RIGHT
					if("Y".equals(ebrk)) {
						rchMapList.add(suvHDataMap);
						suvDat = masterRcHMap.get("SUVDAT") + ", "+suvDatTmp;
						hogi = masterRcHMap.get("HOGI") + ", "+hogiTmp;
						suvnam = masterRcHMap.get("SUVNAM") + ", "+suvnamTmp;
						ups = masterRcHMap.get("UPS") + ", "+upsTmp;
						masterRcHMap.put("SUVDAT", suvDat);
						masterRcHMap.put("HOGI", hogi);
						masterRcHMap.put("SUVNAM", suvnam);
						masterRcHMap.put("UPS", ups);
					} else {
						rdhMapList.add(suvHDataMap);
						suvDat = masterRdHMap.get("SUVDAT") + ", "+suvDatTmp;
						hogi = masterRdHMap.get("HOGI") + ", "+hogiTmp;
						suvnam = masterRdHMap.get("SUVNAM") + ", "+suvnamTmp;
						ups = masterRdHMap.get("UPS") + ", "+upsTmp;
						masterRdHMap.put("SUVDAT", suvDat);
						masterRdHMap.put("HOGI", hogi);
						masterRdHMap.put("SUVNAM", suvnam);
						masterRdHMap.put("UPS", ups);
					}
					rmMapList.add(suvMDataMap);
					masterRcMMap.put("SUVDAT", suvDat);
					masterRcMMap.put("HOGI", hogi);
					masterRcMMap.put("SUVNAM", suvnam);
					masterRcMMap.put("UPS", ups);
				}

				//  CWT.»ó¼¼¹×Ãþ°íºÎºÐ, ½ÂÀåºÎºÐ
				ceMapList.add(suvCEDataMap);
				// CWT - ½ÂÀå ¸¶½ºÅÍ Á¤º¸ »ý¼º
				suvDat = masterCEMap.get("SUVDAT") + ", "+suvDatTmp;
				hogi = masterCEMap.get("HOGI") + ", "+hogiTmp;
				suvnam = masterCEMap.get("SUVNAM") + ", "+suvnamTmp;
				ups = masterCEMap.get("UPS") + ", "+upsTmp;
				masterCEMap.put("SUVDAT", suvDat);
				masterCEMap.put("HOGI", hogi);
				masterCEMap.put("SUVNAM", suvnam);
				masterCEMap.put("UPS", ups);
				
				// Ç¥½Ã±â Àû¿ëÃþ µ¥ÀÌÅÍ Á¶È¸
				List<HashMap<String, Object>> suvViewDataList = dao.selectSuvViewDataList(pramMap);
				if(suvViewDataList.size()>0) {
					for(int z=0; z < suvViewDataList.size(); z++) {
						suvViewDataList.get(z).put("ELR_H_ELVDONG", dong);					
					}
					viewMapList.addAll(suvViewDataList);
				}
				
				// jamb Àû¿ëÃþ µ¥ÀÌÅÍ Á¶È¸
				List<HashMap<String, Object>> suvJambDataList = dao.selectSuvJamDataList(pramMap);
                if(suvJambDataList.size()>0) {
					for(int z=0; z < suvJambDataList.size(); z++) {
						suvJambDataList.get(z).put("ELR_H_ELVDONG", dong);					
					}
                	jambMapList.addAll(suvJambDataList);
                }
                
                // Ãþ°í µ¥ÀÌÅÍ »ý¼º
                String fNmId = "F_"+i;
                String dataKey = "";
                String hogiData = "";
                String hogiDataTmp = "";
                for(int ii=0; ii < floorIds.length; ii++) {
                	String fdata = (String)suvCEDataMap.get(floorIds[ii]);
                	if(fdata !=null) {
                		if(!"".equals(fdata)) {
                    		if(ii== 0) {
                    			// È£±â µ¥ÀÌÅÍ
                    			hogiDataTmp = fdata;
                    		} else {
                        		// °ªºñ±³ µ¥ÀÌÅÍ »ý¼º
                        		dataKey = dataKey + floorNm[ii]+fdata;
                    		}
                		}
                	}
                }

                // °ªºñ±³ÇÏ¿© ¸ÖÆ¼ È£±â°ª »ý¼º
                if(cmpMap.containsKey(dataKey)) {
                	// È£±âµ¥ÀÌÅÍ¸¦ º¯°æÇØ¼­ ÀÔ·ÂÇÑ´Ù.
                	hogiData = cmpMap.get(dataKey);
                	hogiData = hogiData + "," + hogiDataTmp;
                	cmpMap.put(dataKey, hogiData);

                	String  tmpKey  = inHogiMap.get(dataKey);
                	HashMap<String, Object> dataMap = (HashMap<String, Object>) floorTmpMap.get(1);
                	dataMap.put(tmpKey, hogiData);
                } else {
                	// ½Å±Ô µ¥ÀÌÅÍ ÀÔ·Â
                	cmpMap.put(dataKey, hogiDataTmp);
                    for(int jj=0; jj < floorIds.length; jj++) {
                		// ÃÖÃÊ È£±âÁ¤º¸ »ý¼º ½Ã¼¶ÀÇ µ¥ÀÌÅÍ
                    	inHogiMap.put(dataKey, fNmId);
                    	String fdata = (String)suvCEDataMap.get(floorIds[jj]);
                    	if(fdata !=null) {
                    		if(!"".equals(fdata)) {
                            	if(floorTmpMap.containsKey(floorNum[jj])) {
                            		HashMap<String, Object> dataMap = (HashMap<String, Object>) floorTmpMap.get(floorNum[jj]);
                            		dataMap.put(fNmId, fdata);
                            		floorTmpMap.put(floorNum[jj], dataMap);
                            	} else {
                            		HashMap<String, Object> dataMap = new HashMap<String, Object>();
                            		dataMap.put(fNmId, fdata);
                            		// ÃÖÃÊ »ý¼º floorNm
                            		dataMap.put("NM", floorNm[jj]);
                            		floorTmpMap.put(floorNum[jj], dataMap);
                            	}
                    		}
                    	}
                    }
                }
			}
			
			// ¼ÒÆ® Ã³¸®¸¦ ÇÏÀÚ
			Integer[] mapkey = new Integer[floorTmpMap.size()];
			int tmpI = 0;
			for( Integer tmpKey : floorTmpMap.keySet() ){
				mapkey[tmpI] = tmpKey;
				tmpI = tmpI +1;
	        }
			Arrays.sort(mapkey);
			for(int iRow=0; iRow<mapkey.length; iRow++) {
				HashMap<String, Object> dataMap = (HashMap<String, Object>) floorTmpMap.get(mapkey[iRow]);
				if(iRow < 3) {
					if(iRow == 2) {
						for( String key : dataMap.keySet() ) {
							if(key.equals("NM")) {
								dataMap.put("NM", "OH "+dataMap.get(key));
							}
						}
					} else {
						for( String key : dataMap.keySet() ) {
							if(key.equals("NM")) {
								floorMap.put(key+"_"+iRow, dataMap.get(key));
							} else {
								floorMap.put(key+iRow, dataMap.get(key));
							}
						}
					}
				}

				if(iRow > 1) {
				    floorList.add(dataMap);
				}
			}
			// Ãþº° µ¥ÀÌÅÍ ÀÔ·Â
			inputData.put("floorMap", floorMap);
			inputData.put("floorList", floorList);

			// Á¤·ÄÃ³¸®ÇØ¼­ µ¥ÀÌÅÍ »õ·Î »ý¼ºÇÑ´Ù.
			//  floorList Á¶È¸µÈ Ãþº° µ¥ÀÌÅÍ°¡ 16°³ ³Ñ´Â °æ¿ì º°µµ Ã³¸®ÇÑ´Ù.
		    // , Á¦°Å
			if(masterHMap.get("SUVNAM").length()>2) masterHMap.put("SUVNAM", masterHMap.get("SUVNAM").substring(2));
			if(masterHMap.get("SUVDAT").length()>2) masterHMap.put("SUVDAT", masterHMap.get("SUVDAT").substring(2));
			if(masterHMap.get("HOGI").length()>2) masterHMap.put("HOGI", masterHMap.get("HOGI").substring(2));
			if(masterHMap.get("UPS").length()>2) masterHMap.put("UPS", masterHMap.get("UPS").substring(2));

			if(masterMMap.get("SUVNAM").length()>2) masterMMap.put("SUVNAM", masterMMap.get("SUVNAM").substring(2));
			if(masterMMap.get("SUVDAT").length()>2) masterMMap.put("SUVDAT", masterMMap.get("SUVDAT").substring(2));
			if(masterMMap.get("HOGI").length()>2) masterMMap.put("HOGI", masterMMap.get("HOGI").substring(2));
			if(masterMMap.get("UPS").length()>2) masterMMap.put("UPS", masterMMap.get("UPS").substring(2));

			if(masterCEMap.get("SUVNAM").length()>2) masterCEMap.put("SUVNAM", masterCEMap.get("SUVNAM").substring(2));
			if(masterCEMap.get("SUVDAT").length()>2) masterCEMap.put("SUVDAT", masterCEMap.get("SUVDAT").substring(2));
			if(masterCEMap.get("HOGI").length()>2) masterCEMap.put("HOGI", masterCEMap.get("HOGI").substring(2));
			if(masterCEMap.get("UPS").length()>2) masterCEMap.put("UPS", masterCEMap.get("UPS").substring(2));			
			
			if(masterLdHMap.get("SUVNAM").length()>2) masterLdHMap.put("SUVNAM", masterLdHMap.get("SUVNAM").substring(2));
			if(masterLdHMap.get("SUVDAT").length()>2) masterLdHMap.put("SUVDAT", masterLdHMap.get("SUVDAT").substring(2));
			if(masterLdHMap.get("HOGI").length()>2) masterLdHMap.put("HOGI", masterLdHMap.get("HOGI").substring(2));
			if(masterLdHMap.get("UPS").length()>2) masterLdHMap.put("UPS", masterLdHMap.get("UPS").substring(2));

			if(masterLcHMap.get("SUVNAM").length()>2) masterLcHMap.put("SUVNAM", masterLcHMap.get("SUVNAM").substring(2));
			if(masterLcHMap.get("SUVDAT").length()>2) masterLcHMap.put("SUVDAT", masterLcHMap.get("SUVDAT").substring(2));
			if(masterLcHMap.get("HOGI").length()>2) masterLcHMap.put("HOGI", masterLcHMap.get("HOGI").substring(2));
			if(masterLcHMap.get("UPS").length()>2) masterLcHMap.put("UPS", masterLcHMap.get("UPS").substring(2));

			if(masterLcMMap.get("SUVNAM").length()>2) masterLcMMap.put("SUVNAM", masterLcMMap.get("SUVNAM").substring(2));
			if(masterLcMMap.get("SUVDAT").length()>2) masterLcMMap.put("SUVDAT", masterLcMMap.get("SUVDAT").substring(2));
			if(masterLcMMap.get("HOGI").length()>2) masterLcMMap.put("HOGI", masterLcMMap.get("HOGI").substring(2));
			if(masterLcMMap.get("UPS").length()>2) masterLcMMap.put("UPS", masterLcMMap.get("UPS").substring(2));
			
			if(masterRdHMap.get("SUVNAM").length()>2) masterRdHMap.put("SUVNAM", masterRdHMap.get("SUVNAM").substring(2));
			if(masterRdHMap.get("SUVDAT").length()>2) masterRdHMap.put("SUVDAT", masterRdHMap.get("SUVDAT").substring(2));
			if(masterRdHMap.get("HOGI").length()>2) masterRdHMap.put("HOGI", masterRdHMap.get("HOGI").substring(2));
			if(masterRdHMap.get("UPS").length()>2) masterRdHMap.put("UPS", masterRdHMap.get("UPS").substring(2));

			if(masterRcHMap.get("SUVNAM").length()>2) masterRcHMap.put("SUVNAM", masterRcHMap.get("SUVNAM").substring(2));
			if(masterRcHMap.get("SUVDAT").length()>2) masterRcHMap.put("SUVDAT", masterRcHMap.get("SUVDAT").substring(2));
			if(masterRcHMap.get("HOGI").length()>2) masterRcHMap.put("HOGI", masterRcHMap.get("HOGI").substring(2));
			if(masterRcHMap.get("UPS").length()>2) masterRcHMap.put("UPS", masterRcHMap.get("UPS").substring(2));
			
			if(masterRcMMap.get("SUVNAM").length()>2) masterRcMMap.put("SUVNAM", masterRcMMap.get("SUVNAM").substring(2));
			if(masterRcMMap.get("SUVDAT").length()>2) masterRcMMap.put("SUVDAT", masterRcMMap.get("SUVDAT").substring(2));
			if(masterRcMMap.get("HOGI").length()>2) masterRcMMap.put("HOGI", masterRcMMap.get("HOGI").substring(2));
			if(masterRcMMap.get("UPS").length()>2) masterRcMMap.put("UPS", masterRcMMap.get("UPS").substring(2));

			// ½ÇÃøµ¥ÀÌÅÍ ÀÔ·Â
			inputData.put("masterHMap", masterHMap);
			inputData.put("masterMMap", masterMMap);
			inputData.put("masterCEMap", masterCEMap);
			inputData.put("masterLdHMap", masterLdHMap);
			inputData.put("masterLcHMap", masterLcHMap);
			inputData.put("masterLcMMap", masterLcMMap);
			inputData.put("masterRdHMap", masterRdHMap);
			inputData.put("masterRcHMap", masterRcHMap);
			inputData.put("masterRcMMap", masterRcMMap);
			
			// ½Â°­·Î ºÎºÐ
			inputData.put("hMapList", hMapList);
			// ±â°è½Ç ºÎºÐ
			inputData.put("mMapList", mMapList);
			// CWT.»ó¼¼¹×Ãþ°íºÎºÐ
			inputData.put("ceMapList", ceMapList);
			// Ãþ°íµ¥ÀÌÅÍ
			inputData.put("floorMap", floorMap);
			// Ç¥½ÃÁö
			inputData.put("viewMapList", viewMapList);
			// Jamb ¸®½ºÆ®
			inputData.put("jambMapList", jambMapList);
			
			// ½Â°­·Î ºÎºÐ (ÁÂÈ¾¶ô ºÐ¸®)
			inputData.put("ldhMapList", ldhMapList);
			// ½Â°­·Î ºÎºÐ (ÁÂÈ¾¶ô °ø¿ë)
			inputData.put("lchMapList", lchMapList);
			// ±â°è½Ç ºÎºÐ (ÁÂÈ¾¶ô ºÐ¸®,°ø¿ë)
			inputData.put("lmMapList", lmMapList);
			// ½Â°­·Î ºÎºÐ (¿ìÈ¾¶ô ºÐ¸®))
			inputData.put("rdhMapList", rdhMapList);
			// ½Â°­·Î ºÎºÐ (¿ìÈ¾¶ô °ø¿ë)
			inputData.put("rchMapList", rchMapList);
			// ±â°è½Ç ºÎºÐ (¿ìÈ¾¶ô ºÐ¸®,°ø¿ë))
			inputData.put("rmMapList", rmMapList);
			
			List<String> rmSheet = new ArrayList<String>();
			if(hMapList.size()==0) {
				rmSheet.add("½Â°­·Î ºÎºÐ");
			}
			if(mMapList.size()==0) {
				rmSheet.add("±â°è½Ç ºÎºÐ");
			}
			if(ldhMapList.size()==0) {
				rmSheet.add("½Â°­·Î ºÎºÐ (ÁÂÈ¾¶ô ºÐ¸®)");
			}
			if(lchMapList.size()==0) {
				rmSheet.add("½Â°­·Î ºÎºÐ (ÁÂÈ¾¶ô °ø¿ë)");
			}
			if(lmMapList.size()==0) {
				rmSheet.add("±â°è½Ç ºÎºÐ (ÁÂÈ¾¶ô ºÐ¸®,°ø¿ë)");
			}
			if(rdhMapList.size()==0) {
				rmSheet.add("½Â°­·Î ºÎºÐ (¿ìÈ¾¶ô ºÐ¸®))");
			}
			if(rchMapList.size()==0) {
				rmSheet.add("½Â°­·Î ºÎºÐ (¿ìÈ¾¶ô °ø¿ë)");
			}
			if(rmMapList.size()==0) {
				rmSheet.add("±â°è½Ç ºÎºÐ (¿ìÈ¾¶ô ºÐ¸®,°ø¿ë))");
			}

			if(rmSheet.size()>0) {
				String[] rmArray = new String[rmSheet.size()];
				for(int i=0; i < rmSheet.size(); i++) {
					rmArray[i] = rmSheet.get(i);
				}
				xls.setSpreadsheetsToRemove(rmArray);
			}
		} catch (Exception e) {
			throw e;
		} finally {
			session.close();
		}
		return inputData;
	}
	
	/**
	 * 
	 * 50´ÜÀ§ ¿Ã¸²
	 */
	private String getFiftyRound(double x) {
		x = x / 100;
		x = Math.ceil( x * 2 ) / 2;
		x = x * 100;
		BigDecimal bd = new BigDecimal((double)x);
		return String.valueOf(bd.setScale(0, BigDecimal.ROUND_UP));
	}	

	/**
	 * 
	 * 5´ÜÀ§ ¹ö¸² ÇÔ¼ö
	 */
	private String getFiveTrunck(double x) {
		x = x / 10;
		x = Math.floor( x * 2 ) / 2;
		x = x * 10;
		BigDecimal bd = new BigDecimal((double)x);
		return String.valueOf(bd.setScale(0, BigDecimal.ROUND_DOWN));
	}

	/**
	 * 
	 * 10´ÜÀ§ ¹ö¸² ÇÔ¼ö
	 */
	private String getTenTrunck(double x) {
		x = x / 10;
		x = (float) (Math.floor( x ));
		x = x * 10;
		BigDecimal bd = new BigDecimal((double)x);
		return String.valueOf(bd.setScale(0, BigDecimal.ROUND_DOWN));
	}
}
